name: build
description: "This action builds Quicksilver plugins."
inputs:
  CONFIGURATION:
    description: "Determines whether a Release or Debug configuration will be built"
    required: true
    default: Release
  MACOS_CERTIFICATE:
    reuired: true
    description: Required to sign built plugin
  MACOS_CERTIFICATE_PASSWORD:
    required: true
  SIGNING_IDENTITY:
    required: true
    description: Required to sign built plugin

  QS_PUSH_PLUGIN_USER:
    required: true
    description: User for pushing signed plugin to production
  QS_PUSH_PLUGIN_PASS:
    required: true
    description: Password for pushing signed plugin to production

  TEST_DOES_THIS_SHOW_UP_ANYWHERE:
    required: true
    description: Sanity check secrets are staying secret across actions

runs:
  using: "composite"
  steps:
    - name: Mask secret inputs
      shell: bash
      run: |
        echo "::add-mask::${{ inputs.MACOS_CERTIFICATE }}"
        echo "::add-mask::${{ inputs.MACOS_CERTIFICATE_PASSWORD }}"
        echo "::add-mask::${{ inputs.SIGNING_IDENTITY }}"
        echo "::add-mask::${{ inputs.QS_PUSH_PLUGIN_USER }}"
        echo "::add-mask::${{ inputs.QS_PUSH_PLUGIN_PASS }}"

        # TODO
        echo "TEST_DOES_THIS_SHOW_UP_ANYWHERE=${TEST_DOES_THIS_SHOW_UP_ANYWHERE}"
        echo "::add-mask::${{ inputs.TEST_DOES_THIS_SHOW_UP_ANYWHERE }}"
        echo "TEST_DOES_THIS_SHOW_UP_ANYWHERE=${TEST_DOES_THIS_SHOW_UP_ANYWHERE}"
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Clone QS to latest tag
      shell: bash
      env:
        QS_SOURCE_ROOT: /tmp/git/quicksilver
      run: |
        # sanity check secrets are secret
        env | grep DOES_THIS_SHOW_UP_ANYWHERE || true

        # TODO
        echo "TEST_DOES_THIS_SHOW_UP_ANYWHERE=${TEST_DOES_THIS_SHOW_UP_ANYWHERE}"
        # Much quicker to only clone the latest tag as opposed to full clone and then check out tag
        latest_tag=$(
          git ls-remote --tags --refs --sort="-v:refname" https://github.com/quicksilver/quicksilver |
            awk -F/ '{ print $NF; exit }'
        )
        mkdir -p "${QS_SOURCE_ROOT}"
        # TODO run on the main branch if merged
        # git clone --recurse-submodules --branch="${latest_tag}" --depth=1 https://github.com/quicksilver/Quicksilver.git "${QS_SOURCE_ROOT}"
        # git checkout "${latest_tag}"
        git clone --recurse-submodules --branch=qs-push-plugin.swift --depth=1 https://github.com/quicksilver/Quicksilver.git "${QS_SOURCE_ROOT}"
    - name: build plugin
      shell: bash
      env:
        QS_SOURCE_ROOT: /tmp/git/quicksilver
        CONFIGURATION: ${{ inputs.CONFIGURATION }}
      run: |
        # Because we're using a tagged release of Quicksilver we can hopefully
        # assume that the tests have already passed and save some build time here
        export QS_DONT_TEST=1
        "${QS_SOURCE_ROOT}/Quicksilver/Tools/build-qs-plugin" .
    # This seems to need to run after building the plugin; running beforehand oddly gives
    # `foo.bundle` as FULL_PRODUCT_NAME as opposed to `foo.qsplugin`
    - name: Set plugin name
      shell: bash
      run: |
        PLUGIN_NAME=$(
          xcodebuild -showBuildSettings -json |
            jq -r 'map(.buildSettings.FULL_PRODUCT_NAME) | first'
        )
        echo "PLUGIN_NAME=${PLUGIN_NAME}" >> $GITHUB_ENV
    - name: Archive plugin
      shell: bash
      working-directory: /tmp/QS/build/Release
      run: |
        tar -czvf "${PLUGIN_NAME}.tar.gz" "${PLUGIN_NAME}"
    - name: Upload unsigned plugin
      uses: actions/upload-artifact@v5
      with:
        name: UNSIGNED_PLUGIN
        path: /tmp/QS/build/Release/${{ env.PLUGIN_NAME }}.tar.gz
        if-no-files-found: error
    - name: Sign plugin
      shell: bash
      working-directory: /tmp/git/quicksilver
      env:
        CONFIGURATION: ${{ inputs.CONFIGURATION }}
        MACOS_CERTIFICATE: ${{ inputs.MACOS_CERTIFICATE }}
        MACOS_CERTIFICATE_PASSWORD: ${{ inputs.MACOS_CERTIFICATE_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ inputs.KEYCHAIN_PASSWORD }}

        SIGNING_IDENTITY: ${{ inputs.SIGNING_IDENTITY }}
        NOTARIZING_ID: ${{ inputs.NOTARIZING_ID }}
        NOTARIZING_PASS: ${{ inputs.NOTARIZING_PASS }}
      run: |
        set -x
        ./Quicksilver/Tools/qssign "/tmp/QS/build/${CONFIGURATION}/${PLUGIN_NAME}"
    - name: Create checksum
      shell: bash
      run: |
        cd /tmp/QS/build/Release/
        shasum --algorithm 256 "${PLUGIN_NAME}" > checksum.txt
    - name: Archive signed plugin
      shell: bash
      working-directory: /tmp/QS/build/Release
      run: |
        rm -f -- "${PLUGIN_NAME}.tar.gz"
        tar -czvf "${PLUGIN_NAME}.tar.gz" "${PLUGIN_NAME}"
    - name: Upload signed plugin with checksum
      uses: actions/upload-artifact@v5
      with:
        name: ${{ env.PLUGIN_NAME }}
        if-no-files-found: error
        path: |
          /tmp/QS/build/Release/${{ env.PLUGIN_NAME }}.tar.gz
          /tmp/QS/build/Release/checksum.txt
    - name: Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          /tmp/QS/build/Release/${{ env.PLUGIN_NAME }}
          /tmp/QS/build/Release/checksum.txt
    - name: Push to Production
      if: startsWith(github.ref, 'refs/tags/v')
      shell: bash
      run: |
        changelog=$(
          git log --format=%b --max-count=1 "${GITHUB_REF_NAME}" |
            /usr/bin/sed '/^$/d'
        )

        ./qs-push-plugin \
          --user "${{ inputs.QS_PUSH_PLUGIN_USER }}" \
          --password "${{ inputs.QS_PUSH_PLUGIN_PASS }}" \
          --changes "${changelog}" \
          "/tmp/QS/build/Release/${{ env.PLUGIN_NAME }}"
